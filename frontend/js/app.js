document.addEventListener('DOMContentLoaded', () => {
    // --- THEME TOGGLE LOGIC ---
    const themeToggleBtn = document.getElementById('themeToggleBtn');
    const htmlElement = document.documentElement; 

    function applyTheme(theme) {
        if (theme === 'dark') {
            htmlElement.classList.add('dark');
        } else {
            htmlElement.classList.remove('dark');
        }
        localStorage.setItem('theme', theme);
    }
    const storedTheme = localStorage.getItem('theme');
    const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    if (storedTheme) { applyTheme(storedTheme); } 
    else if (systemPrefersDark) { applyTheme('dark'); } 
    else { applyTheme('light'); }
    if (themeToggleBtn) { themeToggleBtn.addEventListener('click', () => { if (htmlElement.classList.contains('dark')) { applyTheme('light'); } else { applyTheme('dark'); }}); } 
    else { console.warn('#themeToggleBtn not found.'); }
    // --- END THEME TOGGLE LOGIC ---

    const backendUrl = 'http://43.134.142.240:3389'; // <--- !!! SET THIS
    
    const socket = io(backendUrl);
    const ui = { /* ... (Same ui object as the very last full app.js I provided, ensure all IDs are mapped) ... */ 
        mainStatus: document.getElementById('mainStatus'), newSessionIdInput: document.getElementById('newSessionId'), addSessionBtn: document.getElementById('addSessionBtn'), addSessionStatus: document.getElementById('addSessionStatus'), sessionsList: document.getElementById('sessionsList'), refreshSessionsBtn: document.getElementById('refreshSessionsBtn'), qrSection: document.getElementById('qrSection'), qrSessionId: document.getElementById('qrSessionId'), qrCodeDisplay: document.getElementById('qrCodeDisplay'), qrMessage: document.getElementById('qrMessage'), interactionContainer: document.getElementById('interactionContainer'), noSessionSelectedMsg: document.getElementById('noSessionSelectedMsg'), currentSessionName: document.getElementById('currentSessionName'), currentSessionStatus: document.getElementById('currentSessionStatus'), featureMenu: document.getElementById('featureMenu'), allFeaturePanels: document.querySelectorAll('.feature-panel'), sendMessageForm: document.getElementById('sendMessageForm'), recipientNumberInput: document.getElementById('recipientNumber'), messageTextInput: document.getElementById('messageText'), sendResponse: document.getElementById('sendResponse'), sendImageForm: document.getElementById('sendImageForm'), imageRecipientNumberInput: document.getElementById('imageRecipientNumber'), imageSourceTypeRadios: document.querySelectorAll('input[name="imageSourceType"]'), imageFileUploadDiv: document.getElementById('imageFileUploadDiv'), imageFileInput: document.getElementById('imageFileInput'), imageUrlDiv: document.getElementById('imageUrlDiv'), imageUrlInput: document.getElementById('imageUrlInput'), imageCaptionInput: document.getElementById('imageCaption'), sendImageResponse: document.getElementById('sendImageResponse'), sendLocationForm: document.getElementById('sendLocationForm'), locationRecipientNumberInput: document.getElementById('locationRecipientNumber'), latitudeInput: document.getElementById('latitudeInput'), longitudeInput: document.getElementById('longitudeInput'), locationDescriptionInput: document.getElementById('locationDescriptionInput'), sendLocationResponse: document.getElementById('sendLocationResponse'), contactIdInput: document.getElementById('contactIdInput'), getContactInfoBtn: document.getElementById('getContactInfoBtn'), contactInfoResult: document.getElementById('contactInfoResult'), setStatusForm: document.getElementById('setStatusForm'), statusMessageInput: document.getElementById('statusMessageInput'), setStatusResponse: document.getElementById('setStatusResponse'), bulkSendForm: document.getElementById('bulkSendForm'), bulkRecipientsInput: document.getElementById('bulkRecipients'), bulkMessageTextInput: document.getElementById('bulkMessageText'), bulkMediaSourceTypeRadios: document.querySelectorAll('input[name="bulkMediaSourceType"]'), bulkMediaFileUploadDiv: document.getElementById('bulkMediaFileUploadDiv'), bulkMediaFileInput: document.getElementById('bulkMediaFileInput'), bulkMediaUrlDiv: document.getElementById('bulkMediaUrlDiv'), bulkMediaUrlInput: document.getElementById('bulkMediaUrlInput'), bulkMediaCaptionInput: document.getElementById('bulkMediaCaptionInput'), bulkSendResponse: document.getElementById('bulkSendResponse'), bulkSendResultsLog: document.getElementById('bulkSendResultsLog'), chatsListDisplay: document.getElementById('chatsListDisplay'), refreshChatsBtn: document.getElementById('refreshChatsBtn'), messageLogDisplay: document.getElementById('messageLogDisplay')
    };
    let currentSelectedSessionId = null; let sessionStates = {};

    function showInteractionUI(show) { ui.interactionContainer.classList.toggle('hidden', !show); ui.noSessionSelectedMsg.classList.toggle('hidden', show); }
    function showFeaturePanel(panelId) { ui.allFeaturePanels.forEach(p => { p.classList.remove('active','block'); p.classList.add('hidden'); }); const targetPanel = document.getElementById(panelId); if (targetPanel) { targetPanel.classList.add('active','block'); targetPanel.classList.remove('hidden');} else { const defaultP = document.getElementById('sendMessagePanel'); if(defaultP) { defaultP.classList.add('active','block'); defaultP.classList.remove('hidden');}} document.querySelectorAll('#featureMenu .feature-link').forEach(link => { link.classList.remove('active-feature', 'bg-blue-500', 'dark:bg-blue-600', 'text-white'); link.classList.add('bg-slate-100', 'dark:bg-slate-700', 'hover:bg-slate-200', 'dark:hover:bg-slate-600', 'text-slate-700', 'dark:text-slate-200'); if (link.dataset.featurePanel === panelId) { link.classList.add('active-feature', 'bg-blue-500', 'dark:bg-blue-600', 'text-white'); link.classList.remove('bg-slate-100', 'dark:bg-slate-700', 'hover:bg-slate-200', 'dark:hover:bg-slate-600', 'text-slate-700', 'dark:text-slate-200'); }});}
    function handleRouteChange() { const hash = window.location.hash.substring(1); const panelMap = { sendtext:'sendMessagePanel', sendimage:'sendImagePanel', sendlocation:'sendLocationPanel', contactinfo:'getContactInfoPanel', setstatus:'setStatusPanel', bulksend:'bulkSendPanel' }; const panelIdToShow = panelMap[hash] || 'sendMessagePanel'; if (currentSelectedSessionId) showFeaturePanel(panelIdToShow); else ui.allFeaturePanels.forEach(p=>{p.classList.remove('active','block');p.classList.add('hidden');});}
    function displayQRCode(sessionId, qr) { ui.qrSessionId.textContent = sessionId; ui.qrCodeDisplay.innerHTML = ''; try { new QRCode(ui.qrCodeDisplay, { text: qr, width: 180, height: 180, correctLevel: QRCode.CorrectLevel.H }); ui.qrMessage.textContent = 'Scan.'; } catch(e) { ui.qrMessage.textContent = 'QR Err.';} ui.qrSection.classList.remove('hidden'); }
    function clearQRCodeDisplay() { ui.qrSessionId.textContent = 'N/A'; ui.qrCodeDisplay.innerHTML = ''; ui.qrMessage.textContent = 'Select/add session.'; }
    function updateMainStatus(msg) { ui.mainStatus.textContent = msg; }
    function updateSessionStatusInList(sessionId, statusMsg) { const el = document.querySelector(`.session-item[data-session-id="${sessionId}"] .session-status`); if (el) el.textContent = statusMsg; if (sessionId === currentSelectedSessionId) ui.currentSessionStatus.textContent = statusMsg; }
    function logMessageToUI(sessionId, sender, text, type, ts) { if (sessionId !== currentSelectedSessionId) return; const div = document.createElement('div'); const time = ts ? new Date(ts*1000).toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'}) : new Date().toLocaleTimeString([],{hour:'2-digit',minute:'2-digit'}); div.classList.add('p-2','rounded-lg','mb-1','text-xs','break-words','w-fit','max-w-[85%]'); if(type==='sent'){div.classList.add('bg-green-100','dark:bg-green-700','text-green-800','dark:text-green-100','ml-auto');div.innerHTML=`<strong>You (${time}):</strong> ${text}`;} else if(type==='received'){div.classList.add('bg-blue-100','dark:bg-blue-700','text-blue-800','dark:text-blue-100','mr-auto');div.innerHTML=`<strong>${sender.replace(/@c\.us|@g\.us/,'')} (${time}):</strong> ${text}`;} else{div.classList.add('bg-gray-200','dark:bg-slate-600','text-gray-700','dark:text-slate-300','text-center','italic','mx-auto');div.innerHTML=`[${time}] ${text}`;} ui.messageLogDisplay.appendChild(div); ui.messageLogDisplay.scrollTop = ui.messageLogDisplay.scrollHeight; }
    async function fetchActiveSessions() { try { updateMainStatus('Fetching...'); const r = await fetch(`${backendUrl}/sessions`); if(!r.ok) throw new Error(`HTTP ${r.status}`); const d = await r.json(); if(d.success) renderSessionsList(d.sessions); else updateMainStatus('Fetch fail.'); } catch(e){console.error(e); updateMainStatus('Fetch err.');}}
    function renderSessionsList(sData) { ui.sessionsList.innerHTML = ''; if(sData.length===0){ui.sessionsList.innerHTML='<p class="text-sm text-slate-500 dark:text-slate-400">No sessions.</p>'; return;} sData.forEach(s => { sessionStates[s.sessionId]={...sessionStates[s.sessionId], isReady:s.isReady, hasQrFromBackend:s.hasQr}; let stxt='Init...'; if(s.isReady)stxt='Ready'; else if(s.hasQr||sessionStates[s.sessionId]?.qr)stxt='Needs QR'; const div=document.createElement('div'); div.className=`session-item p-3 border border-transparent dark:hover:border-slate-600 hover:bg-slate-50 dark:hover:bg-slate-700 rounded-lg flex justify-between items-center ${s.sessionId===currentSelectedSessionId?'active':''}`; div.setAttribute('data-session-id',s.sessionId); div.innerHTML=`<span class="flex-grow cursor-pointer"><span class="font-medium text-slate-700 dark:text-slate-200">${s.sessionId}</span><span class="text-xs italic session-status ml-2 text-slate-500 dark:text-slate-400">${stxt}</span></span><button class="remove-session-btn text-xs text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-500 p-1.5 rounded-md hover:bg-red-100 dark:hover:bg-red-900/50" title="Remove">&#x1F5D1;</button>`; div.querySelector('.flex-grow').addEventListener('click',()=>handleSelectSession(s.sessionId)); div.querySelector('.remove-session-btn').addEventListener('click',(e)=>{e.stopPropagation();handleRemoveSession(s.sessionId);}); ui.sessionsList.appendChild(div);});}
    async function handleAddNewSession() { const sid = ui.newSessionIdInput.value.trim(); if(!sid){ui.addSessionStatus.textContent='ID required.';return;} ui.addSessionStatus.textContent=`Initializing ${sid}...`; ui.newSessionIdInput.value=''; socket.emit('request_init_session',sid); ui.addSessionStatus.textContent=`Request for ${sid} sent.`; handleSelectSession(sid); window.location.hash= (currentSelectedSessionId && sessionStates[currentSelectedSessionId]?.isReady) ? (window.location.hash || '#sendtext') : '#sendtext'; }
    function handleSelectSession(sessionId) { if(!sessionId) return; currentSelectedSessionId=sessionId; ui.currentSessionName.textContent=sessionId; showInteractionUI(true); ui.messageLogDisplay.innerHTML=''; ui.chatsListDisplay.innerHTML=''; ui.sendResponse.textContent=''; document.querySelectorAll('.session-item').forEach(i=>i.classList.remove('active')); const itemEl=document.querySelector(`.session-item[data-session-id="${sessionId}"]`); if(itemEl)itemEl.classList.add('active'); socket.emit('join_session_room', sessionId); updateSessionStatusInList(sessionId,'Loading...'); if(sessionStates[sessionId]?.isReady){fetchChatsForSession(sessionId);} if(!window.location.hash || window.location.hash ==='#') window.location.hash = '#sendtext'; else handleRouteChange(); if(sessionStates[sessionId]?.qr) displayQRCode(sessionId, sessionStates[sessionId].qr); else clearQRCodeDisplay(); }
    async function handleRemoveSession(sessionId) { if(!sessionId||!confirm(`Remove ${sessionId}?`))return; updateMainStatus(`Removing ${sessionId}...`); try{const r=await fetch(`${backendUrl}/session/remove/${sessionId}`,{method:'POST'}); const d=await r.json(); updateMainStatus(d.success?d.message:`Err: ${d.error}`);}catch(e){updateMainStatus(`Net err removing ${sessionId}.`);console.error(e);}}
    
    socket.on('connect',()=>{updateMainStatus('Connected.');fetchActiveSessions();}); socket.on('disconnect',()=>{updateMainStatus('Disconnected.');});
    socket.on('qr_code',(d)=>{sessionStates[d.sessionId]={...sessionStates[d.sessionId],qr:d.qr,isReady:false};updateSessionStatusInList(d.sessionId,'QR. Scan.');if(d.sessionId===currentSelectedSessionId)displayQRCode(d.sessionId,d.qr);});
    socket.on('authenticated',(d)=>{sessionStates[d.sessionId]={...sessionStates[d.sessionId],qr:null,isReady:false};updateSessionStatusInList(d.sessionId,'Authenticated. Wait ready...');if(d.sessionId===currentSelectedSessionId)clearQRCodeDisplay();});
    socket.on('ready',(d)=>{sessionStates[d.sessionId]={...sessionStates[d.sessionId],qr:null,isReady:true};updateSessionStatusInList(d.sessionId,'Client Ready!');if(d.sessionId===currentSelectedSessionId){clearQRCodeDisplay();fetchChatsForSession(d.sessionId);handleRouteChange();}});
    socket.on('auth_failure',(d)=>{sessionStates[d.sessionId]={...sessionStates[d.sessionId],qr:null,isReady:false};updateSessionStatusInList(d.sessionId,`Auth Fail: ${d.message}`);if(d.sessionId===currentSelectedSessionId){clearQRCodeDisplay();ui.qrMessage.textContent=`Auth fail: ${d.message}`;}});
    socket.on('session_removed',(d)=>{updateMainStatus(`Sess ${d.sessionId} removed.`);delete sessionStates[d.sessionId];if(d.sessionId===currentSelectedSessionId){currentSelectedSessionId=null;showInteractionUI(false);clearQRCodeDisplay();window.location.hash='';}fetchActiveSessions();});
    socket.on('init_error',(d)=>updateSessionStatusInList(d.sessionId,`Init Err: ${d.error}`));
    socket.on('status_update',(d)=>{updateSessionStatusInList(d.sessionId,d.message); if(d.sessionId===currentSelectedSessionId&&d.qr!==undefined){if(d.qr)displayQRCode(d.sessionId,d.qr);else clearQRCodeDisplay();} if(!document.querySelector(`.session-item[data-session-id="${d.sessionId}"]`)&&d.message.toLowerCase().includes("started"))fetchActiveSessions();});
    socket.on('disconnected',(d)=>{sessionStates[d.sessionId]={...sessionStates[d.sessionId],isReady:false,qr:null};updateSessionStatusInList(d.sessionId,`Disconnected: ${d.reason}.`);});
    socket.on('new_message',(e)=>{logMessageToUI(e.sessionId,e.message.author||e.message.from,e.message.body||`[Media: ${e.message.type}]`,'received',e.message.timestamp);});
    socket.on('message_sent',(e)=>{logMessageToUI(e.sessionId,'You',e.body,'sent',e.timestamp);});
    socket.on('media_sent',(e)=>{logMessageToUI(e.sessionId,'You',`Sent ${e.type}: ${e.filename||''} ${e.caption?'cap:"'+e.caption+'"':''}`,'sent',Date.now()/1000);});
    socket.on('location_sent',(e)=>{logMessageToUI(e.sessionId,'You',`Sent loc: ${e.latitude},${e.longitude} ${e.description?'('+e.description+')':''}`,'sent',Date.now()/1000);});
    socket.on('status_message_set',(e)=>{logMessageToUI(e.sessionId,'System',`Your status updated to: "${e.status}"`,'system',Date.now()/1000);});
    socket.on('bulk_send_complete', (data) => { if (data.sessionId === currentSelectedSessionId) { ui.bulkSendResponse.innerHTML = `<p class="text-green-600 dark:text-green-400">Bulk completed for ${data.sessionId}.</p>`; ui.bulkSendResultsLog.innerHTML=''; data.results.forEach(res => { const p=document.createElement('p');p.textContent=`To:${res.recipient} - Status:${res.status} ${res.error?'Err:'+res.error:''}`;p.className=res.error?'text-red-500 dark:text-red-400':'text-green-600 dark:text-green-400';ui.bulkSendResultsLog.appendChild(p);});}});

    async function apiPost(endpoint, body, isFormData = false) { const headers = isFormData ? {} : { 'Content-Type': 'application/json' }; const fetchBody = isFormData ? body : JSON.stringify(body); try { const response = await fetch(`${backendUrl}${endpoint}`, { method: 'POST', headers, body: fetchBody }); if (!response.ok) { let errorPayload = `HTTP error! Status: ${response.status}`; try { errorPayload = await response.text(); } catch (textError) { console.warn(`Could not read error response body as text for ${endpoint}:`, textError); } console.error(`API POST Error to ${endpoint}: ${response.status} - ${errorPayload}`); return { success: false, error: errorPayload, status: response.status }; } return await response.json(); } catch (error) { console.error(`API POST Network/Processing Error to ${endpoint}:`, error); return { success: false, error: error.message || 'Network or processing error.' }; }}
    async function apiGet(endpoint) { try { const response = await fetch(`${backendUrl}${endpoint}`); if (!response.ok) { let errorPayload = `HTTP error! Status: ${response.status}`; try { errorPayload = await response.text(); } catch (textError) { console.warn(`Could not read error response body as text for ${endpoint}:`, textError); } console.error(`API GET Error to ${endpoint}: ${response.status} - ${errorPayload}`); return { success: false, error: errorPayload, status: response.status }; } return await response.json(); } catch (error) { console.error(`API GET Network/Processing Error to ${endpoint}:`, error); return { success: false, error: error.message || 'Network or processing error.' }; }}

    async function handleSendMessage(e) { e.preventDefault(); if(!currentSelectedSessionId||!sessionStates[currentSelectedSessionId]?.isReady){ui.sendResponse.textContent='Select ready session.';return;} const num=ui.recipientNumberInput.value.trim(),msg=ui.messageTextInput.value.trim(); if(!num||!msg){ui.sendResponse.textContent='Recipient & msg needed.';return;} ui.sendResponse.textContent='Sending...'; const res=await apiPost(`/session/send-message/${currentSelectedSessionId}`,{number:num,message:msg}); ui.sendResponse.textContent=res.success?('Sent!'):`Err: ${res.error}`; if(res.success)ui.sendMessageForm.reset(); }
    async function handleGetContactInfo() { if(!currentSelectedSessionId||!sessionStates[currentSelectedSessionId]?.isReady){ui.contactInfoResult.innerHTML='<p class="text-red-500 dark:text-red-400">Select ready session.</p>';return;} const cid=ui.contactIdInput.value.trim(); if(!cid){ui.contactInfoResult.innerHTML='<p class="text-red-500 dark:text-red-400">Contact ID needed.</p>';return;} ui.contactInfoResult.innerHTML='<p class="text-blue-500 dark:text-blue-400">Fetching...</p>'; const res=await apiGet(`/session/contact-info/${currentSelectedSessionId}/${encodeURIComponent(cid)}`); if(res.success&&res.contactInfo){const c=res.contactInfo;ui.contactInfoResult.innerHTML=`<h4 class="font-semibold text-slate-700 dark:text-slate-200">${c.pushname||c.name||'N/A'} (${c.number||c.id})</h4>${c.profilePicUrl?`<img src="${c.profilePicUrl}" alt="Pic" class="h-20 w-20 rounded-full my-2 border border-slate-300 dark:border-slate-600">`:''}<p>ID:${c.id}</p><p>Pushname:${c.pushname||'N/A'}</p><p>Block:${c.isBlocked}</p>`;}else ui.contactInfoResult.innerHTML=`<p class="text-red-500 dark:text-red-400">Err: ${res.error||'Not found.'}</p>`;}
    async function handleSendImage(e) { e.preventDefault(); if(!currentSelectedSessionId||!sessionStates[currentSelectedSessionId]?.isReady){ui.sendImageResponse.textContent='Select ready session.';return;} const recipient=ui.imageRecipientNumberInput.value.trim(), caption=ui.imageCaptionInput.value.trim(), srcType=document.querySelector('input[name="imageSourceType"]:checked').value; const formData=new FormData(); formData.append('number',recipient); formData.append('caption',caption); if(srcType==='file'){const file=ui.imageFileInput.files[0];if(!recipient||!file){ui.sendImageResponse.textContent='Recipient & file needed.';return;}formData.append('imageFile',file);} else{const url=ui.imageUrlInput.value.trim();if(!recipient||!url){ui.sendImageResponse.textContent='Recipient & URL needed.';return;}formData.append('imageUrl',url);} ui.sendImageResponse.textContent='Sending image...'; const res=await apiPost(`/session/send-image/${currentSelectedSessionId}`,formData,true); ui.sendImageResponse.textContent=res.success?'Image sent!':`Err: ${res.error}`; if(res.success){ui.sendImageForm.reset();document.querySelector('input[name="imageSourceType"][value="file"]').checked=true;ui.imageFileUploadDiv.classList.remove('hidden');ui.imageUrlDiv.classList.add('hidden');if(ui.imageFileInput)ui.imageFileInput.required=true;if(ui.imageUrlInput)ui.imageUrlInput.required=false;}}
    async function handleSendLocation(e) { e.preventDefault(); if(!currentSelectedSessionId||!sessionStates[currentSelectedSessionId]?.isReady){ui.sendLocationResponse.textContent='Select ready session.';return;} const rec=ui.locationRecipientNumberInput.value.trim(),lat=ui.latitudeInput.value.trim(),lon=ui.longitudeInput.value.trim(),desc=ui.locationDescriptionInput.value.trim(); if(!rec||!lat||!lon){ui.sendLocationResponse.textContent='Recipient,lat,lon needed.';return;} ui.sendLocationResponse.textContent='Sending loc...'; const res=await apiPost(`/session/send-location/${currentSelectedSessionId}`,{number:rec,latitude:parseFloat(lat),longitude:parseFloat(lon),description:desc}); ui.sendLocationResponse.textContent=res.success?'Loc sent!':`Err: ${res.error}`; if(res.success)ui.sendLocationForm.reset(); }
    async function handleSetStatus(e) { e.preventDefault(); if(!currentSelectedSessionId||!sessionStates[currentSelectedSessionId]?.isReady){ui.setStatusResponse.textContent='Select ready session.';return;} const stat=ui.statusMessageInput.value; ui.setStatusResponse.textContent='Setting status...'; const res=await apiPost(`/session/set-status/${currentSelectedSessionId}`,{statusMessage:stat}); ui.setStatusResponse.textContent=res.success?'Status updated!':`Err: ${res.error}`; }
    async function handleBulkSend(e) {
        e.preventDefault(); if (!currentSelectedSessionId || !sessionStates[currentSelectedSessionId]?.isReady) { ui.bulkSendResponse.innerHTML = '<p class="text-red-500 dark:text-red-400">Select a ready session first.</p>'; return; }
        const recipientsVal = ui.bulkRecipientsInput.value.trim(); const msgTxt = ui.bulkMessageTextInput.value.trim(); const mediaSrc = document.querySelector('input[name="bulkMediaSourceType"]:checked').value; const mediaCap = ui.bulkMediaCaptionInput.value.trim();
        const recipientsArr = recipientsVal.split(/[\n,]+/).map(r => r.trim()).filter(r => r);
        if (recipientsArr.length === 0) { ui.bulkSendResponse.innerHTML = '<p class="text-red-500 dark:text-red-400">Recipients required.</p>'; return; }
        if (!msgTxt && mediaSrc === 'none') { ui.bulkSendResponse.innerHTML = '<p class="text-red-500 dark:text-red-400">Message or media required.</p>'; return; }
        let mediaFile = null, mediaUrlVal = null;
        if (mediaSrc === 'file') { mediaFile = ui.bulkMediaFileInput.files[0]; if (!mediaFile) { ui.bulkSendResponse.innerHTML = '<p class="text-red-500 dark:text-red-400">Media file required for upload.</p>'; return; } }
        else if (mediaSrc === 'url') { mediaUrlVal = ui.bulkMediaUrlInput.value.trim(); if (!mediaUrlVal) { ui.bulkSendResponse.innerHTML = '<p class="text-red-500 dark:text-red-400">Media URL required.</p>'; return; } }
        ui.bulkSendResponse.innerHTML = `<p class="text-yellow-500 dark:text-yellow-400">Starting bulk send to ${recipientsArr.length} recipients...</p>`; ui.bulkSendResultsLog.innerHTML = ''; let successes = 0, failures = 0;
        ui.bulkSendForm.querySelectorAll('input, textarea, button').forEach(el => el.disabled = true);
        for (let i = 0; i < recipientsArr.length; i++) {
            const recipient = recipientsArr[i]; const logEntry = document.createElement('p'); logEntry.textContent = `Sending to ${recipient}... `; ui.bulkSendResultsLog.appendChild(logEntry); ui.bulkSendResultsLog.scrollTop = ui.bulkSendResultsLog.scrollHeight;
            let result = { success: false, error: 'No action' }, actionTaken = false;
            if (mediaSrc !== 'none') { actionTaken = true; const fd = new FormData(); fd.append('number', recipient); fd.append('caption', msgTxt || mediaCap); if (mediaFile) fd.append('imageFile', mediaFile); else if (mediaUrlVal) fd.append('imageUrl', mediaUrlVal); result = await apiPost(`/session/send-image/${currentSelectedSessionId}`, fd, true);
            } else if (msgTxt) { actionTaken = true; result = await apiPost(`/session/send-message/${currentSelectedSessionId}`, { number: recipient, message: msgTxt }); }
            if (actionTaken) { if (result.success) { logEntry.textContent += ' Sent!'; logEntry.className = 'text-green-600 dark:text-green-400'; successes++; } else { logEntry.textContent += ` Failed: ${result.error || 'Unknown'}`; logEntry.className = 'text-red-500 dark:text-red-400'; failures++; } }
            else { logEntry.textContent += ' Skipped.'; logEntry.className = 'text-gray-500 dark:text-gray-400'; }
            ui.bulkSendResponse.innerHTML = `<p class="text-yellow-500 dark:text-yellow-400">Processed ${i+1}/${recipientsArr.length}. Success: ${successes}, Fail: ${failures}.</p>`;
            if (i < recipientsArr.length - 1) await new Promise(resolve => setTimeout(resolve, 2000 + Math.random() * 1000)); // 2-3s delay
        }
        ui.bulkSendResponse.innerHTML = `<p class="text-green-600 dark:text-green-400">Bulk send done. Total: ${recipientsArr.length}, Success: ${successes}, Fail: ${failures}.</p>`;
        ui.bulkSendForm.querySelectorAll('input, textarea, button').forEach(el => el.disabled = false);
    }
    async function fetchChatsForSession(sessionId) { if(!sessionId||!sessionStates[sessionId]?.isReady){ui.chatsListDisplay.innerHTML=`<p class="text-sm text-slate-500 dark:text-slate-400">Sess ${sessionId} not ready.</p>`;return;} updateSessionStatusInList(sessionId,'Fetching chats...'); ui.chatsListDisplay.innerHTML='<p class="text-sm text-slate-500 dark:text-slate-400">Loading...</p>'; const res=await apiGet(`/session/chats/${sessionId}`); if(res.success){renderChats(sessionId,res.chats);updateSessionStatusInList(sessionId,'Chats loaded.');}else{ui.chatsListDisplay.innerHTML=`<p class="text-red-500 dark:text-red-400">Err: ${res.error}</p>`;updateSessionStatusInList(sessionId,`Err: ${res.error}`);}}
    function renderChats(sessionId, chatsData) { if (sessionId !== currentSelectedSessionId) return; if (!chatsData || chatsData.length === 0) { ui.chatsListDisplay.innerHTML = '<p class="text-sm text-slate-500 dark:text-slate-400">No chats.</p>'; return; } ui.chatsListDisplay.innerHTML = ''; chatsData.forEach(chat => { const div = document.createElement('div'); div.className = 'p-2 hover:bg-slate-100 dark:hover:bg-slate-700 cursor-pointer border-b border-gray-200 dark:border-slate-700 rounded-md text-xs'; let preview = chat.lastMessage ? `${chat.lastMessage.fromMe ? 'You: ' : ''}${chat.lastMessage.body || `[Media: ${chat.lastMessage.type}]`}` : 'No recent'; div.innerHTML = `<div class="flex justify-between items-center"><h5 class="font-semibold text-slate-700 dark:text-slate-200 truncate" title="${chat.name||chat.id.split('@')[0]}">${chat.name||chat.id.split('@')[0]}</h5>${chat.unreadCount > 0 ? `<span class="bg-green-500 text-white text-xs font-semibold px-1.5 py-0.5 rounded-full">${chat.unreadCount}</span>` : ''}</div><p class="text-slate-500 dark:text-slate-400 truncate" title="${preview}">${preview}</p>`; div.onclick = () => { ui.recipientNumberInput.value = chat.id; ui.imageRecipientNumberInput.value = chat.id; ui.locationRecipientNumberInput.value = chat.id; ui.messageTextInput.focus(); logMessageToUI(sessionId, 'System', `Selected chat: ${chat.name||chat.id}`, 'system'); }; ui.chatsListDisplay.appendChild(div);});}

    // UI Event Listeners
    if(ui.addSessionBtn) ui.addSessionBtn.addEventListener('click', handleAddNewSession);
    if(ui.refreshSessionsBtn) ui.refreshSessionsBtn.addEventListener('click', fetchActiveSessions);
    if(ui.sendMessageForm) ui.sendMessageForm.addEventListener('submit', handleSendMessage);
    if(ui.getContactInfoBtn) ui.getContactInfoBtn.addEventListener('click', handleGetContactInfo);
    if(ui.sendImageForm) ui.sendImageForm.addEventListener('submit', handleSendImage);
    if(ui.imageSourceTypeRadios) ui.imageSourceTypeRadios.forEach(r=>r.addEventListener('change',function(){if(ui.imageFileUploadDiv)ui.imageFileUploadDiv.classList.toggle('hidden',this.value!=='file');if(ui.imageUrlDiv)ui.imageUrlDiv.classList.toggle('hidden',this.value!=='url');if(ui.imageFileInput)ui.imageFileInput.required=this.value==='file';if(ui.imageUrlInput)ui.imageUrlInput.required=this.value==='url';}));
    if(ui.sendLocationForm) ui.sendLocationForm.addEventListener('submit', handleSendLocation);
    if(ui.setStatusForm) ui.setStatusForm.addEventListener('submit', handleSetStatus);
    if(ui.bulkSendForm) ui.bulkSendForm.addEventListener('submit', handleBulkSend);
    if(ui.bulkMediaSourceTypeRadios) ui.bulkMediaSourceTypeRadios.forEach(r=>r.addEventListener('change',function(){if(ui.bulkMediaFileUploadDiv)ui.bulkMediaFileUploadDiv.classList.toggle('hidden',this.value!=='file');if(ui.bulkMediaUrlDiv)ui.bulkMediaUrlDiv.classList.toggle('hidden',this.value!=='url');if(ui.bulkMediaFileInput)ui.bulkMediaFileInput.required=this.value==='file';if(ui.bulkMediaUrlInput)ui.bulkMediaUrlInput.required=this.value==='url';}));
    if(ui.refreshChatsBtn) ui.refreshChatsBtn.addEventListener('click', () => { if (currentSelectedSessionId && sessionStates[currentSelectedSessionId]?.isReady) fetchChatsForSession(currentSelectedSessionId);});
    
    if (ui.featureMenu) { ui.featureMenu.addEventListener('click', (e) => { const link = e.target.closest('.feature-link'); if (link && link.dataset.featurePanel) { e.preventDefault(); window.location.hash = link.hash; }});}
    window.addEventListener('hashchange', handleRouteChange);
    window.addEventListener('load', () => { fetchActiveSessions(); showInteractionUI(false); clearQRCodeDisplay(); updateMainStatus('Initializing...'); handleRouteChange(); });
});